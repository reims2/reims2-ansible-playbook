- name: Ensure github.com is a known host for dokku user
  ansible.builtin.lineinfile:
    dest: /home/dokku/.ssh/known_hosts
    create: true
    state: present
    line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
    regexp: "^github\\.com"
    mode: "0644"
- name: dokku create apps
  dokku_app:
    app: "{{ item }}"
  loop:
    - "{{ api_app_name }}"
    - "{{ frontend_app_name }}"
    - "{{ docs_app_name }}"

- name: Create mysql
  dokku_service_create:
    name: "{{ db_name }}"
    service: mariadb
- name: Disable Mysql strict mode (to allow zero dates)
  ansible.builtin.blockinfile:
    path: "/var/lib/dokku/services/mariadb/{{ db_name }}/config/disable_strict_mode.cnf"
    create: "yes"
    block: |
      [mysqld]
      sql_mode="ONLY_FULL_GROUP_BY,NO_ENGINE_SUBSTITUTION"
    mode: "0644"
  notify:
    - restart dokku mariadb
- name: Flush handlers to reload DB before starting API
  ansible.builtin.meta: flush_handlers
- name: Link database to api
  dokku_service_link:
    app: "{{ api_app_name }}"
    name: "{{ db_name }}"
    service: mariadb
- name: Enable backups for mysql to S3
  when: aws_bucket_name != ""
  ansible.builtin.shell: |
    dokku mariadb:backup-auth {{ db_name }} {{ aws_key_id }} {{ aws_secret_key }}
    dokku mariadb:backup-schedule {{ db_name }} "0 2,10,18 * * *" {{ aws_bucket_name }}

- name: "Frontend env vars: internal URLS for API+docs and nodejs host+port"
  dokku_config:
    app: "{{ frontend_app_name }}"
    config:
      PORT: "5000"
      API_URL: "http://{{ api_app_name }}.web:5000/pvh/api"
      DOCS_URL: "http://{{ docs_app_name }}.web:5000"
      HOST: "0.0.0.0"
- name: "Frontend env vars: Enable debug"
  when: debug_enable
  dokku_config:
    app: "{{ frontend_app_name }}"
    config:
      PVH_DEBUG: "true"
- name: "API env vars: api token"
  dokku_config:
    app: "{{ api_app_name }}"
    config:
      PORT: "5000"
      PVH_JWT_SECRET: "{{ api_jwt_token }}"
- name: "API env vars: Enable debug"
  when: debug_enable
  dokku_config:
    app: "{{ api_app_name }}"
    config:
      PVH_DEBUG: "true"

- name: "Docs env vars: nodejs host+port vars"
  dokku_config:
    app: "{{ docs_app_name }}"
    config:
      PORT: "5000"
      HOST: "0.0.0.0"
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
- name: Create network configuration (all apps in one network)
  ansible.builtin.shell: |
    dokku network:create {{ dokku_network_name }}
    dokku network:set {{ frontend_app_name }} attach-post-deploy {{ dokku_network_name }}
    dokku network:set {{ api_app_name }} attach-post-deploy {{ dokku_network_name }}
    dokku network:set {{ docs_app_name }} attach-post-deploy {{ dokku_network_name }}
    dokku network:rebuildall
- name: Add main domain to frontend
  dokku_domains:
    app: "{{ frontend_app_name }}"
    domains:
      - "{{ frontend_domain }}"
- name: Add API domain
  dokku_domains:
    app: "{{ api_app_name }}"
    domains:
      - "{{ api_domain }}"
- name: Disable docs proxy
  dokku_proxy:
    app: "{{ docs_app_name }}"
    state: absent
- name: Start vector container for persistent logging
  ansible.builtin.command: dokku logs:vector-start
- name: "Frontend: Configure persistent logging for all apps"
  ansible.builtin.command: "dokku logs:set {{ item }} vector-sink 'file://?path=/var/log/dokku/apps/{{ item }}.log&encoding[codec]=text'"
  loop:
    - "{{ frontend_app_name }}"
    - "{{ api_app_name }}"
    - "{{ docs_app_name }}"
- name: Configure logrotate for persistent app logs
  ansible.builtin.copy:
    src: dokku-logrotate.conf
    dest: "/etc/logrotate.d/dokku-vector.conf"
    owner: root
    group: root
    mode: "0644"
- name: Deploy frontend from git (this takes 5 minutes and will work even when failing with timeout)
  timeout: 300
  ignore_errors: true
  tags: deploy
  dokku_clone:
    app: "{{ frontend_app_name }}"
    repository: https://github.com/reims2/reims2-frontend
    version: main
    build: true
- name: Deploy api from git (this takes up to 3 minutes and will work even when failing with timeout)
  timeout: 180
  ignore_errors: true
  tags: deploy
  dokku_clone:
    app: "{{ api_app_name }}"
    repository: https://github.com/reims2/reims2-backend
    version: main
    build: true
- name: Deploy docs from git (this takes up to 3 minutes and will work even when failing with timeout)
  timeout: 180
  ignore_errors: true
  tags: deploy
  dokku_clone:
    app: "{{ docs_app_name }}"
    repository: https://github.com/reims2/reims2-docs
    version: main
    build: true
- name: "Set letsencrypt mail"
  ansible.builtin.command: dokku letsencrypt:set --global email letsencrypt@kxlion.de
- name: Enable letsencrypt
  dokku_letsencrypt:
    app: "{{ item }}"
  loop:
    - "{{ frontend_app_name }}"
    - "{{ api_app_name }}"

- name: Enable letsencrypt auto renew
  ansible.builtin.command: dokku letsencrypt:cron-job --add
- name: "Run restore DB tasks"
  ansible.builtin.import_tasks: tasks/restore-db.yml
  tags:
    - restore-mysql
    - deploy
  when: db_dump != ""
