{{ ansible_managed | comment }}

version: '3'
services:
  proxy:
    image: docker.io/library/traefik:{{ traefik_version }}
    read_only: true
    restart: always
    ports:
      - "80:80"
      - "443:443"
{% for entrypoint in traefik_additional_entrypoints %}
      - "{{ entrypoint.port }}:{{ entrypoint.port }}"
{% endfor %}

    volumes:
{% if traefik_dynamic_conf != omit %}
      - "{{ traefik_config_location }}:/etc/traefik/dynamic_conf:ro"
{% endif %}
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ traefik_acme_location }}:/etc/traefik/acme"

    command:
      - "--entryPoints.http.address=:80"
      - "--entryPoints.https.address=:443"
{% for entrypoint in traefik_additional_entrypoints %}
      - "--entryPoints.{{ entrypoint.name }}.address=:{{ entrypoint.port }}"
{% endfor %}
      - "--accesslog={{ traefik_access_log_enabled | bool | lower }}"
{% if traefik_dynamic_conf != omit %}
      - "--providers.file.directory=/etc/traefik/dynamic_conf"
      - "--providers.file.watch=true"
{% endif %}
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network={{ proxy_network }}"
      - "--providers.docker.swarmMode=true"
{% if traefik_https_letsencrypt_enabled %}
      - "--certificatesResolvers.{{ traefik_certresolver }}.acme.httpChallenge=true"
      - "--certificatesResolvers.{{ traefik_certresolver }}.acme.email={{ traefik_letsencrypt_email }}"
      - "--certificatesResolvers.{{ traefik_certresolver }}.acme.storage=/etc/traefik/acme/acme.json"
      - "--certificatesResolvers.{{ traefik_certresolver }}.acme.httpChallenge.entrypoint=http"
{% endif %}
{% if traefik_debug %}
      - "--log.level=DEBUG"
# FIXME TODO
      - "--api=true"
      - "--api.insecure=true"
      - "--api.dashboard=true"
{% endif %}


{% if traefik_options | length > 0 %}
    environment:
{% for key, value in traefik_options.items() %}
      - "{{ key }}={{ value }}"
{% endfor %}
{% endif %}

    deploy:
      labels:
        - "traefik.enable=true"
{% if traefik_https_redirect_all %}
        - "traefik.http.routers.http_catchall.rule=HostRegexp(`{any:.+}`)"
        - "traefik.http.routers.http_catchall.entrypoints=http"
        - "traefik.http.routers.http_catchall.middlewares=https_redirect"
{% endif %}
        - "traefik.http.middlewares.https_redirect.redirectscheme.scheme=https"
        - "traefik.http.middlewares.https_redirect.redirectscheme.permanent=true"
        - "traefik.http.middlewares.compress.compress=true"
{% if traefik_dashboard_auth is defined %}
        - "traefik.http.routers.api.rule=Host(`{{ traefik_dashboard_domain }}`)"
        - "traefik.http.routers.api.service=api@internal"
        - "traefik.http.routers.api.middlewares=traefikauth"
        - "traefik.http.middlewares.traefikauth.basicauth.users={{ traefik_dashboard_auth }}"
{% endif %}

      placement:
        constraints:
          - "node.role == manager"
      resources:
        limits:
          cpus: "1"
          memory: 256M
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      {{ proxy_network }}:

 
  frontend:
    image: docker.io/reims2/reims2-frontend:latest
    restart: always
    environment:
      - "BASE_URL_BROWSER=https://{{ traefik_domain }}"
      - "BASE_URL_INTERNAL=http://backend:5000"
    networks:
      {{ proxy_network }}:
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`{{ traefik_domain }}`)"
        - "traefik.http.routers.frontend.entrypoints=https"
        #- "traefik.http.routers.frontend.middlewares=compress"
        - "traefik.http.routers.frontend.tls.certresolver={{ traefik_certresolver }}"
        - "traefik.http.services.frontend.loadbalancer.server.port=5000"
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s


  backend:
    image: docker.io/reims2/reims2-backend:latest
    restart: always
    depends_on:
      - db
    environment:
      - "PVH_JWT_SECRET=dsndkjnakdjnasasdnasdkjwnqdjnqdnassjdaksjdnkajnsdkjnaskdjnaksjndkajsndknwkjdnqkjwndkqwdoqsdiwjeodejqwodjoj"
      - "DATABASE_HOST=db"
      - "DATABASE_PORT=3306"
      - "DATABASE_NAME={{ reims2_db_name}}"
      - "DATABASE_USER={{ reims2_db_user }}"
      - "DATABASE_PASSWORD={{ reims2_db_password }}"
    networks:
      {{ proxy_network }}:
      {{ db_network }}:
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=Host(`{{ traefik_domain }}`) && PathPrefix(`/api`)"
        - "traefik.http.routers.backend.entrypoints=https"
        #- "traefik.http.routers.backend.middlewares=compress"
        - "traefik.http.routers.backend.tls.certresolver={{ traefik_certresolver }}"
        - "traefik.http.services.backend.loadbalancer.server.port=5000"
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
 
  docs:
    image: docker.io/reims2/reims2-docs:latest
    restart: always
    networks:
      {{ proxy_network }}:
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.docs.rule=Host(`{{ traefik_domain }}`) && PathPrefix(`/docs`)"
        - "traefik.http.routers.docs.entrypoints=https"
        #- "traefik.http.routers.docs.middlewares=compress"
        - "traefik.http.routers.docs.tls.certresolver={{ traefik_certresolver }}"
        - "traefik.http.services.docs.loadbalancer.server.port=5000"
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
 

  db:
    image: docker.io/mariadb
    restart: always
    environment:
      MARIADB_ROOT_PASSWORD: "{{ reims2_db_root_password }}"
      MARIADB_DATABASE: "{{ reims2_db_name }}"
      MARIADB_USER: "{{ reims2_db_user }}"
      MARIADB_PASSWORD: "{{ reims2_db_password }}"
    volumes:
      - "{{ traefik_db_location }}:/var/lib/mysql"
    networks:
      {{ db_network }}:
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
 
  grafana:
    image: grafana/grafana-oss:latest
    networks:
      {{ proxy_network }}:
      {{ db_network }}:
    volumes:
     - "{{grafana_data_location}}:/var/lib/grafana"
    environment:
     - GF_SERVER_ROOT_URL=https://%(domain)s/
     - GF_SERVER_ENFORCE_DOMAIN=true
     - GF_SERVER_DOMAIN={{ monitoring_domain }}
    restart: always
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`{{ monitoring_domain }}`)"
        - "traefik.http.routers.grafana.entrypoints=https"
       # - "traefik.http.routers.grafana.middlewares=compress"
        - "traefik.http.routers.grafana.tls.certresolver={{ traefik_certresolver }}"
        - "traefik.http.services.grafana.loadbalancer.server.port={{ grafana_port }}"
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
 

networks:
  {{ proxy_network }}:
    external: true
  {{ db_network }}:
