---
- name: Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0770"
    owner: "root"
    group: "docker"
  with_items:
    - "{{ stack_install_location }}"
    - "{{ log_location }}"
  become: true

- name: Configure logrotate for logs
  ansible.builtin.template:
    src: logrotate.conf.j2
    dest: "/etc/logrotate.d/{{ stack_name }}"
    owner: root
    group: root
    mode: "0644"

- name: Init a new swarm with default parameters
  community.docker.docker_swarm:
    state: present
  become: true

- name: Create networks
  community.docker.docker_network:
    name: "{{ item }}"
    driver: "overlay"
    driver_options:
      com.docker.network.bridge.name: "{{ item }}"
  become: true
  loop:
    - "{{ db_network }}"
    - "{{ stack_network }}"

- name: Add stack network to traefik
  ansible.builtin.blockinfile:
    dest: "{{ traefik_stack_file }}"
    state: present
    validate: docker-compose -f %s config -q
    marker: "# {mark} ANSIBLE MANAGED BLOCK for networks of compose for {{ stack_name }}"
    insertafter: "^networks:"
    content: |
      # indentation helper comment
        {{ stack_network }}:
          external: true
  notify:
    - reload proxy
    - wait for traefik

- name: Add stack network to traefik
  ansible.builtin.blockinfile:
    dest: "{{ traefik_stack_file }}"
    state: present
    validate: docker-compose -f %s config -q
    marker: "# {mark} ANSIBLE MANAGED BLOCK for networks of service for {{ stack_name }}"
    insertafter: "\\s+networks:"
    content: |
      # indentation helper comment
            {{ stack_network }}:
  notify:
    - reload proxy
    - wait for traefik

- name: Delete existing docker compose when reset_docker_stack is true
  ansible.builtin.file:
    path: "{{ stack_file }}"
    state: absent
  when: reset_docker_stack
  become: true

- name: Create base docker-compose.yml if not exists
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ stack_file }}"
    mode: "0660"
    owner: "root"
    group: "docker"
    force: false
  become: true
  notify: reload stack
