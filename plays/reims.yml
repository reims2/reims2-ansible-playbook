---
- hosts: all
  become: true
  roles:
    - dokku_bot.ansible_dokku
  vars:
    dokku_hostname: "{{ inventory_hostname }}"
    dokku_packages_state: latest
    dokku_vhost_enable: true
    dokku_users:
      - name: Github Actions
        username: ci-deploy
        ssh_key: "{{ lookup('file', '../creds/deploy_key.pub') }}"
      - name: Local developer for debug
        username: dev
        ssh_key: "{{lookup('file', '~/.ssh/id_rsa.pub')}}"
    dokku_plugins:
      - name: letsencrypt
        url: https://github.com/dokku/dokku-letsencrypt.git
      - name: mariadb
        url: https://github.com/dokku/dokku-mariadb.git

  tasks:
    - name: ensure github.com is a known host for dokku user
      lineinfile:
        dest: /dokku/.ssh/known_hosts
        create: yes
        state: present
        line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
        regexp: "^github\\.com"
    - name: ensure github.com is a known host for current user
      lineinfile:
        dest: /dokku/.ssh/known_hosts
        create: yes
        state: present
        line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
        regexp: "^github\\.com"
    - name: dokku create api
      dokku_app:
        app: "{{api_app_name}}"
    - name: dokku create frontend
      dokku_app:
        app: "{{frontend_app_name}}"
    - name: dokku create docs
      dokku_app:
        app: "{{docs_app_name}}"

    - name: Create mysql
      dokku_service_create:
        name: "{{db_name}}"
        service: mariadb
    - name: Disable Mysql strict mode (to allow zero dates)
      blockinfile:
        path: "/var/lib/dokku/services/mariadb/{{db_name}}/config/disable_strict_mode.cnf"
        create: "yes"
        block: |
          [mysqld]
          sql_mode="ONLY_FULL_GROUP_BY,NO_ENGINE_SUBSTITUTION"
    - name: Restart mysql to apply config
      shell: "dokku mariadb:restart {{db_name}}"
    - name: Link database to api
      dokku_service_link:
        app: "{{ api_app_name }}"
        name: "{{db_name}}"
        service: mariadb
    - name: Enable backups for mysql to S3
      when: aws_bucket_name is defined and aws_bucket_name != '' and aws_bucket_name != None
      shell: |
        dokku mariadb:backup-auth {{db_name}} {{aws_key_id}} {{aws_secret_key}}
        dokku mariadb:backup-schedule {{db_name}} "0 2,10,18 * * *" {{aws_bucket_name}}
    - name: Set multiple variables for frontend
      dokku_config:
        app: "{{frontend_app_name}}"
        config:
          DOKKU_LETSENCRYPT_EMAIL: substantialimpulse@pm.me
          PORT: "5000"
          API_URL: "http://{{api_app_name}}.web:5000/pvh/api"
          DOCS_URL: "http://{{docs_app_name}}.web:5000"
          HOST: "0.0.0.0"
    - name: Set letsencrypt config and backend token for api
      dokku_config:
        app: "{{api_app_name}}"
        config:
          DOKKU_LETSENCRYPT_EMAIL: substantialimpulse@pm.me
          PORT: "5000"
          PVH_JWT_SECRET: "{{backend_jwt_token}}"
    - name: Set host and port for docs
      dokku_config:
        app: "{{docs_app_name}}"
        config:
          PORT: "5000"
          HOST: "0.0.0.0"
    - name: Create network configuration (all apps in one network)
      shell: |
        dokku network:create {{dokku_network_name}}
        dokku network:set {{frontend_app_name}} attach-post-deploy {{dokku_network_name}}
        dokku network:set {{api_app_name}} attach-post-deploy {{dokku_network_name}}
        dokku network:set {{docs_app_name}} attach-post-deploy {{dokku_network_name}}
        dokku network:rebuildall
    - name: Add main domain to frontend
      dokku_domains:
        app: "{{frontend_app_name}}"
        domains:
          - "{{ frontend_domain }}"
    - name: Disable docs proxy
      dokku_proxy:
        app: "{{docs_app_name}}"
        state: absent
    - name: Enable frontend letsencrypt
      dokku_letsencrypt:
        app: "{{frontend_app_name}}"
    - name: Enable letsencrypt auto renew
      shell: dokku letsencrypt:cron-job --add
    - name: Deploy frontend from git (this takes 5 minutes and will work even when failing with timeout)
      timeout: 300
      ignore_errors: yes
      tags: deploy
      dokku_clone:
        app: "{{frontend_app_name}}"
        repository: https://github.com/reims2/reims2-frontend
        version: main
        build: True
    - name: Deploy api from git (this takes up to 3 minutes and will work even when failing with timeout)
      timeout: 180
      ignore_errors: yes
      tags: deploy
      dokku_clone:
        app: "{{api_app_name}}"
        repository: https://github.com/reims2/reims2-backend
        version: main
        build: True
    - name: Deploy docs from git (this takes up to 3 minutes and will work even when failing with timeout)
      timeout: 180
      ignore_errors: yes
      tags: deploy
      dokku_clone:
        app: "{{docs_app_name}}"
        repository: https://github.com/reims2/reims2-docs
        version: main
        build: True
    - import_tasks: ../tasks/restore-db.yml
      tags:
        - restore-mysql
        - deploy
      when: db_dump != ""
